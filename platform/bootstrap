#!/usr/bin/env bash

# Execute by: bash xxx.sh or bash zzz/yyy/xxx.sh or ./xxx.sh or ./zzz/yyy/xxx.sh source xxx.sh
REALPATH=$(realpath ${BASH_SOURCE[0]})
SCRIPT_DIR=$(cd $(dirname ${REALPATH}) && pwd)
WORK_DIR=$(cd $(dirname ${REALPATH}) && pwd)
echo "BASH_SOURCE=${BASH_SOURCE}, REALPATH=${REALPATH}, SCRIPT_DIR=${SCRIPT_DIR}, WORK_DIR=${WORK_DIR}"
cd ${WORK_DIR}

APP_ARGS=$@
echo "Run srs-cloud with args: ${APP_ARGS}, WORK_DIR:${WORK_DIR}"

# Get the metadata of machine.
if [[ -f ${WORK_DIR}/.env ]]; then source ${WORK_DIR}/.env; fi
echo "LoadEnv CLOUD=$CLOUD REGION=$REGION, SOURCE=$SOURCE"

# When env is ok, we try to load extra envs. Note that these envs is only for mgmt, we should pass to container if
# container wants to use it.
if [[ -f ${WORK_DIR}/containers/bin/.env ]]; then
  source ${WORK_DIR}/containers/bin/.env
fi

# Always make sure the containers/data directory exists.
if [[ ! -d ${WORK_DIR}/containers/data ]]; then rm -rf ${WORK_DIR}/containers/data; fi &&
(cd ${WORK_DIR}/containers/data && mkdir -p redis config dvr record vod upload vlive) &&
(cd ${WORK_DIR} && touch containers/data/config/.env && rm -f .env && ln -sf containers/data/config/.env .env) &&
if [[ $? -ne 0 ]]; then echo "MGMT create containers directory failed"; exit 1; fi
echo "MGMT create containers directory"

# Start redis.
bash auto/start_redis

# Start SRS.
bash auto/start_srs

# Start the application server.
./platform $APP_ARGS

# Stop redis.
bash auto/stop_redis

# Stop SRS.
bash auto/stop_srs
