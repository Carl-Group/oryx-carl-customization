#!/usr/bin/env bash

# Execute by: bash xxx.sh or bash zzz/yyy/xxx.sh or ./xxx.sh or ./zzz/yyy/xxx.sh source xxx.sh
REALPATH=$(realpath ${BASH_SOURCE[0]})
SCRIPT_DIR=$(cd $(dirname ${REALPATH}) && pwd)
WORK_DIR=$(cd $(dirname ${REALPATH}) && pwd)
echo "BASH_SOURCE=${BASH_SOURCE}, REALPATH=${REALPATH}, SCRIPT_DIR=${SCRIPT_DIR}, WORK_DIR=${WORK_DIR}"
cd ${WORK_DIR}

DATA_HOME=/data
IMAGE=ossrs/srs-cloud:1
MGMT_PORT=2022
RTMP_PORT=1935
API_PORT=1985
HTTP_PORT=8080
RTC_PORT=8000
SRT_PORT=10080
# Use local srs-cloud directory for debug.
DEBUG_HOME=

echo "Force to stop platform container"
docker rm -f srs-cloud 2>/dev/null

if [[ ! -z $DEBUG_HOME ]]; then
    EXTRA_PARAMS="${EXTRA_PARAMS} -v ${DEBUG_HOME}:/usr/local/srs-cloud"
    echo "Use local srs-cloud directory for debug: ${DEBUG_HOME}"
fi

echo "Start platform container"
CMD="docker run -v ${DATA_HOME}:/data ${EXTRA_PARAMS}
    -p ${MGMT_PORT}:2022 -p ${RTMP_PORT}:1935/tcp -p ${API_PORT}:1985/tcp -p
    ${HTTP_PORT}:8080/tcp -p ${RTC_PORT}:8000/udp -p ${SRT_PORT}:10080/udp
    --restart no --rm -it --name srs-cloud --detach
    ${IMAGE}"
echo $CMD && $CMD
if [[ $? -ne 0 ]]; then echo "Start platform container failed"; exit 1; fi
echo "Start platform container ok"

handle_signals() {
    echo "Signal $1 received. Cleaning up and exiting..."

    ID=$(docker ps --filter "name=srs-cloud" --format "{{.ID}}")
    if [[ ! -z $ID ]]; then
        docker stop srs-cloud
    fi

    exit 0
}

trap 'handle_signals SIGTERM' SIGTERM
trap 'handle_signals SIGINT' SIGINT

while true; do
    ID=$(docker ps --filter "name=srs-cloud" --format "{{.ID}}")
    if [[ -z $ID ]]; then
        echo "Platform container not found"
        exit 1
    fi

    docker ps -a --filter "name=srs-cloud" --format "{{.Names}} {{.ID}} {{.Ports}}"
    sleep 3
done
